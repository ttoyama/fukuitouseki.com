name: Build booklet PDF

on:
  push:
    branches: [ main ]
    paths:
      - '.bookorder'
      - '**/*.md'
      - '.github/workflows/booklet.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pandoc & TeX & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex texlive-latex-recommended \
            texlive-fonts-recommended texlive-lang-cjk fonts-noto-cjk fonts-noto

      - name: Prepare ordered list
        id: order
        run: |
          # コメント・空行を除去
          grep -v '^\s*#' .bookorder | sed '/^\s*$/d' > .bookorder.clean
          # bookフォルダは削除済みのため、表紙処理をスキップ
          cp .bookorder.clean .bookorder.with_cover
          # 存在チェック
          missing=0
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            if [ ! -f "$f" ]; then
              echo "::error file=.bookorder::指定ファイルが見つかりません: $f"
              missing=1
            fi
          done < .bookorder.with_cover
          [ $missing -eq 0 ] || exit 1
          tr '\n' '\0' < .bookorder.with_cover > order.nul

      - name: Debug file order
        run: |
          echo "=== File order debug ==="
          cat .bookorder.with_cover
          echo "=== First file content check ==="
          head -10 "$(head -1 .bookorder.with_cover)"
          echo "=== All files content check ==="
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            echo "=== Content of: $file ==="
            head -3 "$file" || echo "Failed to read: $file"
          done < .bookorder.with_cover
          
      - name: Build complete booklet (Pandoc → XeLaTeX)
        run: |
          mkdir -p pdfs
          
          # 日付と時刻でのファイル名生成（JST時刻使用）
          export TZ='Asia/Tokyo'
          DATETIME=$(date '+%Y%m%d_%H%M')
          DATE_VERSION=$(date '+%Y.%m.%d')
          PDF_BASE_NAME="fukuitouseki_booklet_${DATETIME}"
          
          # 同一時刻での重複回避のためのバージョン管理
          VERSION=""
          COUNTER=1
          while [ -f "booklet-pdf/${PDF_BASE_NAME}${VERSION}.pdf" ]; do
            VERSION="-${COUNTER}"
            COUNTER=$((COUNTER + 1))
          done
          PDF_NAME="${PDF_BASE_NAME}${VERSION}.pdf"
          
          echo "Generated PDF name: $PDF_NAME"
          
          # Try a different approach - use cat to combine files first
          echo "---" > combined.md
          echo "title: 福井県透析防災マニュアル（${DATETIME}版）" >> combined.md
          echo "author: 福井透析ネットワーク本部" >> combined.md
          echo "lang: ja" >> combined.md
          echo "CJKmainfont: 'Noto Sans CJK JP'" >> combined.md
          echo "mainfont: 'Noto Sans'" >> combined.md
          echo "geometry: top=30mm,left=20mm,right=20mm,bottom=30mm" >> combined.md
          echo "documentclass: article" >> combined.md
          echo "fontsize: 12pt" >> combined.md
          echo "header-includes: |" >> combined.md
          echo "  \\usepackage{fancyhdr}" >> combined.md
          echo "  \\pagestyle{fancy}" >> combined.md
          echo "  \\fancyhf{}" >> combined.md
          echo "  \\fancyhead[R]{\\small 福井県透析防災マニュアル ${DATE_VERSION}版}" >> combined.md
          echo "  \\fancyfoot[C]{\\thepage}" >> combined.md
          echo "  \\renewcommand{\\headrulewidth}{0.5pt}" >> combined.md
          echo "  \\fancypagestyle{plain}{%" >> combined.md
          echo "    \\fancyhf{}" >> combined.md
          echo "    \\fancyhead[R]{\\small 福井県透析防災マニュアル ${DATE_VERSION}版}" >> combined.md
          echo "    \\fancyfoot[C]{\\thepage}" >> combined.md
          echo "    \\renewcommand{\\headrulewidth}{0.5pt}" >> combined.md
          echo "  }" >> combined.md
          echo "  \\newcommand{\\underlinespace}[1]{\\underline{\\hspace{#1}}}" >> combined.md
          echo "  \\newcommand{\\checkbox}{$\\square$\\ }" >> combined.md
          echo "  \\newcommand{\\checkedbox}{$\\blacksquare$\\ }" >> combined.md
          echo "  \\newcommand{\\circlecheck}{$\\bigcirc$\\ }" >> combined.md
          echo "---" >> combined.md
          echo "" >> combined.md
          
          # Combine all files, stripping individual YAML frontmatters
          # ファイル一覧を.bookorderから動的に読み込み（コメント行除く）
          first_file=true
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            [[ "$file" =~ ^[[:space:]]*# ]] && continue
            
            # 最初のファイル以外は改ページを確実に挿入
            if [ "$first_file" = true ]; then
              first_file=false
            else
              echo "" >> combined.md
              echo "\\newpage" >> combined.md
              echo "" >> combined.md
              # ファイル名からdocs/と.qmdを除去してヘッダを作成
              filename_base=$(basename "$file" .qmd)
              DATE_ONLY=$(date '+%Y%m%d')
              echo "${filename_base} （${DATE_ONLY}版）" >> combined.md
              echo "" >> combined.md
            fi
            
            # Skip YAML frontmatter and add content, fix newpage commands correctly
            sed '1,/^---$/d; /^---$/,/^---$/d' "$file" | \
            sed 's/^% .*$//' | \
            sed 's/ewpage/\\newpage/g' | \
            sed 's/\\\\newpage/\\newpage/g' | \
            sed '/^[[:space:]]*$/N; /^[[:space:]]*\n[[:space:]]*$/d' >> combined.md
          done < .bookorder.with_cover
          
          # Build PDF from combined file
          pandoc combined.md \
            --pdf-engine=xelatex \
            --toc \
            --toc-depth=2 \
            --number-sections \
            -V linestretch=1.2 \
            -V pagestyle=fancy \
            -o "pdfs/${PDF_NAME}"
          
          # PDF名を環境変数として保存
          echo "PDF_NAME=${PDF_NAME}" >> $GITHUB_ENV
          
          ls -lah pdfs

      - name: Commit PDF to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          mkdir -p booklet-pdf
          cp "pdfs/${PDF_NAME}" "booklet-pdf/${PDF_NAME}"
          git add "booklet-pdf/${PDF_NAME}"
          if ! git diff --staged --quiet; then
            git commit -m "PDF生成完了: 福井県透析防災マニュアル (${PDF_NAME})"
            git push
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: booklet-pdf
          path: pdfs/${{ env.PDF_NAME }}