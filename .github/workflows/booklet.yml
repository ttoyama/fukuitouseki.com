name: Build booklet PDF

on:
  push:
    branches: [ main ]
    paths:
      - '.bookorder'
      - '**/*.md'
      - 'book/**'
      - '.github/workflows/booklet.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pandoc & TeX & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex texlive-latex-recommended \
            texlive-fonts-recommended texlive-lang-cjk fonts-noto-cjk fonts-noto

      - name: Prepare ordered list
        id: order
        run: |
          # コメント・空行を除去
          grep -v '^\s*#' .bookorder | sed '/^\s*$/d' > .bookorder.clean
          # 表紙を先頭に差し込む（存在すれば）
          if [ -f book/cover.md ]; then
            printf 'book/cover.md\n' | cat - .bookorder.clean > .bookorder.with_cover
          else
            cp .bookorder.clean .bookorder.with_cover
          fi
          # 存在チェック
          missing=0
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            if [ ! -f "$f" ]; then
              echo "::error file=.bookorder::指定ファイルが見つかりません: $f"
              missing=1
            fi
          done < .bookorder.with_cover
          [ $missing -eq 0 ] || exit 1
          tr '\n' '\0' < .bookorder.with_cover > order.nul

      - name: Debug file order
        run: |
          echo "=== File order debug ==="
          cat .bookorder.with_cover
          echo "=== First file content check ==="
          head -10 "$(head -1 .bookorder.with_cover)"
          echo "=== All files content check ==="
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            echo "=== Content of: $file ==="
            head -3 "$file" || echo "Failed to read: $file"
          done < .bookorder.with_cover
          
      - name: Build complete booklet (Pandoc → XeLaTeX)
        run: |
          mkdir -p pdfs
          
          # 日付とバージョン管理のためのファイル名生成
          DATE=$(date '+%Y%m%d')
          PDF_BASE_NAME="fukuitouseki_booklet_${DATE}"
          
          # 同日に複数バージョンが存在する場合の対応
          if [ -f "booklet-pdf/${PDF_BASE_NAME}.pdf" ]; then
            VERSION=2
            while [ -f "booklet-pdf/${PDF_BASE_NAME}-${VERSION}.pdf" ]; do
              VERSION=$((VERSION + 1))
            done
            PDF_NAME="${PDF_BASE_NAME}-${VERSION}.pdf"
          else
            PDF_NAME="${PDF_BASE_NAME}.pdf"
          fi
          
          echo "Generated PDF name: $PDF_NAME"
          
          # Try a different approach - use cat to combine files first
          echo "---" > combined.md
          echo "title: 災害時透析医療オペレーション手引き" >> combined.md
          echo "author: 福井透析ネットワーク本部" >> combined.md
          echo "lang: ja" >> combined.md
          echo "CJKmainfont: 'Noto Sans CJK JP'" >> combined.md
          echo "mainfont: 'Noto Sans'" >> combined.md
          echo "geometry: margin=20mm" >> combined.md
          echo "documentclass: article" >> combined.md
          echo "fontsize: 12pt" >> combined.md
          echo "---" >> combined.md
          echo "" >> combined.md
          
          # Combine all files, stripping individual YAML frontmatters
          for file in book/cover.md "docs/01-各施設の役割と対応.md" "docs/02-福井県透析施設ネットワークの役割と対応.md" "docs/資料/資料_福井県内透析施設一覧.md" "docs/資料/資料_透析患者向け食品栄養成分表.md" "docs/資料/01-初動対応_様式01_災害時透析医療機関状況報告書_初動報告用.md" "docs/資料/01-初動対応_チェックリスト_01_0-30分.md" "docs/資料/01-初動対応_チェックリスト_02_1-3時間.md" "docs/資料/01-初動対応_チェックリスト_03_3-24時間.md"; do
            echo "" >> combined.md
            echo "\\newpage" >> combined.md
            echo "" >> combined.md
            # Skip YAML frontmatter and add content
            sed '1,/^---$/d; /^---$/,/^---$/d' "$file" >> combined.md
          done
          
          # Build PDF from combined file
          pandoc combined.md \
            --pdf-engine=xelatex \
            --toc \
            --toc-depth=2 \
            --number-sections \
            -V linestretch=1.2 \
            -o "pdfs/${PDF_NAME}"
          
          # PDF名を環境変数として保存
          echo "PDF_NAME=${PDF_NAME}" >> $GITHUB_ENV
          
          ls -lah pdfs

      - name: Commit PDF to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          mkdir -p booklet-pdf
          cp "pdfs/${PDF_NAME}" "booklet-pdf/${PDF_NAME}"
          git add "booklet-pdf/${PDF_NAME}"
          if ! git diff --staged --quiet; then
            git commit -m "PDF生成完了: 災害時透析医療オペレーション手引き (${PDF_NAME})"
            git push
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: booklet-pdf
          path: pdfs/${{ env.PDF_NAME }}